<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">

    <!--    spring对bean的管理细节
            1.创建bean的三种方式：
                （1）适用默认构造函数创建：
                    在spring配置文件中适用bean标签，配置id和class，无其他标签。必须要有默认构造函数
                （2）适用普通工厂中的方法创建对象（使用某个类中的方法创建对象，放入spring）
                （3）适用工厂中的静态方法创建对象，类中的静态方法存入spring
            2.bean对象的作用范围
                bean标签的scope属性：
                    singleton:单例（默认）
                    prototype:多例
                    request:作用于web应用的请求范围
                    session:web回话范围
                    global-session:集群环境的会话范围（全局），不是集群既是session

            3.bean对象的生命周期
              单例对象：
                  出生：当容器创建时，对象出生
                  活着：只要容器还在，对象一直活
                  死亡：容器销毁
                <bean id="accountService" class="com.zhaoxin.spring.service.impl.AccountServiceImpl"
                    init-method="saveAccount" destroy-method="saveAccount"/>

               多例对象：
                 出生：使用时才通过spring创建
                 活着：只要使用中 就一直活着
                 死亡：当对象长时间不用且没有别的对象使用时java的垃圾回收器回收
    />
    -->
    <!--    <bean id="accountService" class="com.zhaoxin.spring.service.impl.AccountServiceImpl"-->
    <!--        init-method="saveAccount" destroy-method="saveAccount"/>-->
    <!--    默认构造器-->
    <!--    <bean id="accountDao" class="com.zhaoxin.spring.dao.impl.AccountDaoImpl"/>-->
    <!--    工厂方法-->
    <!--    <bean id="instanceFactory" class="com.zhaoxin.spring.client.InstanceFactory"/>-->
    <!--    <bean id="accountService1" factory-bean="instanceFactory" factory-method="getAccountService"/>-->

    <!--        静态工厂方法-->
    <!--    <bean id="accountService2" class="com.zhaoxin.spring.client.StaticFactory" factory-method="getAccountService"/>-->

    <!--    spring的依赖注入-->
    <!--            降低程序之间的耦合（依赖关系）-->
    <!--                依赖关系的管理交给spring-->
    <!--            能注入的数据有三类：-->
    <!--                基本数据类型和string-->
    <!--                其他bean类型（配置文件活着注解配置过得bean）-->
    <!--                复杂类型/集合类型-->
    <!--            注入的方式：有三种-->
    <!--                构造器函数注入-->
    <!--                set方法-->
    <!--                注解提供-->

    <!--            type:注入数据的类型-->
    <!--            index:参数索引位置-->
    <!--            name:构造函数中指定名称的参数赋值-->
    <!--            value:-->
    <!--            ref：-->
    <!--    <bean id="accountService" class="com.zhaoxin.spring.service.impl.AccountServiceImpl">-->
    <!--        <constructor-arg name="age" value="18"></constructor-arg>-->
    <!--        <constructor-arg name="name" value="zhaoxin"></constructor-arg>-->
    <!--        <constructor-arg name="birthday" ref="now"></constructor-arg>-->
    <!--    </bean>-->
    <!--    <bean id="now" class="java.util.Date"></bean>-->
    <!--    <bean id="accountServiceImpl2" class="com.zhaoxin.spring.service.impl.AccountServiceImpl2">-->
    <!--&lt;!&ndash;        set方法：property&ndash;&gt;-->
    <!--        <property name="name" value="zhaoxin2"></property>-->
    <!--        <property name="age" value="19"></property>-->
    <!--        <property name="birthday" ref="now"></property>-->
    <!--    </bean>-->
    <!--    <bean id="accountServiceImpl3" class="com.zhaoxin.spring.service.impl.AccountServiceImpl3">-->
    <!--        <property name="myStr">-->
    <!--            <array>-->
    <!--                <value>aaaa</value>-->
    <!--                <value>bbbb</value>-->
    <!--                <value>cccc</value>-->
    <!--            </array>-->
    <!--        </property>-->
    <!--        <property name="mylist">-->
    <!--            <list>-->
    <!--                <value>aaaa</value>-->
    <!--                <value>bbbb</value>-->
    <!--                <value>cccc</value>-->
    <!--            </list>-->
    <!--        </property>-->
    <!--        <property name="mySet">-->
    <!--            <set>-->
    <!--                <value>aaaa</value>-->
    <!--                <value>bbbb</value>-->
    <!--                <value>cccc</value>-->
    <!--            </set>-->
    <!--        </property>-->
    <!--        <property name="myMap">-->
    <!--            <map>-->
    <!--                <entry key="aaa:" value="AAAA"></entry>-->
    <!--                <entry key="bbb:" value="BBBB"></entry>-->
    <!--                <entry key="ccc:" value="CCCC"></entry>-->
    <!--            </map>-->
    <!--        </property>-->
    <!--    </bean>-->

    <!--    扫描的包告知spring，不在bean里，在context里的-->
    <!--    <context:component-scan base-package="com.zhaoxin.spring"></context:component-scan>-->
    <bean id="accountServiceImplDemo" class="com.zhaoxin.spring.service.impl.AccountServiceImplDemo">
        <property name="accoutDao" ref="accoutDao"></property>
    </bean>
    <bean id="accoutDao" class="com.zhaoxin.spring.dao.impl.AccountDaoImplDemo">
        <property name="queryRunner" ref="queryRunner"></property>
    </bean>
    <bean id="queryRunner" class="org.apache.commons.dbutils.QueryRunner">
        <constructor-arg name="ds" ref="dataSource"></constructor-arg>
    </bean>

    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="com.mysql.jdbc.Driver"></property>
        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/eesy"></property>
        <property name="user" value="root"></property>
        <property name="password" value="123456"></property>
    </bean>
</beans>